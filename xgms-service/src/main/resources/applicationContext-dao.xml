<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:component-scan base-package="com.huel.xgms.**"/>
    <bean id = "propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath*:db.properties</value>
            </list>
        </property>
    </bean>
    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${driverClassName}" />
        <property name="url" value="${url}" />
        <property name="username" value="${username}" />
        <property name="password" value="${password}" />
        <!-- druid 连接池的监控
        <property name="filters" value="stat" />
        -->
        <!--maxActive: 最大连接数量 -->
        <property name="maxActive" value="${maxActive}" />
        <!--initialSize: 初始化连接 -->
        <property name="initialSize" value="${initialSize}" />
    </bean>
    <!-- 配置数据源工厂 -->
    <bean id="dataSourceFactory" class="org.jfaster.mango.datasource.SimpleDataSourceFactory">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--拦截器配置-->
    <bean id="interceptorChain" class="org.jfaster.mango.interceptor.InterceptorChain">
        <property name="interceptors">
            <list>
                <!--MySQL分页-->
                <bean class="org.jfaster.mango.plugin.page.MySQLPageInterceptor"/>
            </list>
        </property>
    </bean>

    <!-- 配置mango对象 -->
    <bean id="mango" class="org.jfaster.mango.operator.Mango" factory-method="newInstance">
        <property name="dataSourceFactory" ref="dataSourceFactory" />
        <property name="interceptorChain" ref="interceptorChain"/>
    </bean>

    <!-- 配置扫描使用@DB注解修饰的DAO类 -->
    <bean class="org.jfaster.mango.plugin.spring.MangoDaoScanner">
        <property name="packages">
            <list>
                <!-- 扫描包名 -->
                <value>com.huel.xgms</value>
                <!-- <value>其他需要扫描的包</value> -->
            </list>
        </property>
    </bean>

    <!-- 集成redis -->
    <!-- redis 连接池配置 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.pool.maxTotal}"/>
        <property name="maxIdle" value="${redis.pool.maxIdle}"/>
        <property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}"/>
        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}"/>
        <property name="testOnReturn" value="${redis.pool.testOnReturn}"/>
    </bean>
    <!-- redis node节点配置 -->
   <!-- <bean id="redisSentinelConfiguration" class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
        <property name="master">
            <bean class="org.springframework.data.redis.connection.RedisNode">
                <property name="name" value="mymaster"/>
                <constructor-arg name="host" value="${redis.ip}"/>
                <constructor-arg name="port" value="${redis.port}"/>
            </bean>
        </property>
        <property name="password">
            <bean class="org.springframework.data.redis.connection.RedisPassword">
            </bean>
        </property>
        &lt;!&ndash; 可以配置在此配置多个从节点 &ndash;&gt;
        &lt;!&ndash;<property name="sentinels">
            <set>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="${redis.sentinel1.host}"></constructor-arg>
                    <constructor-arg name="port" value="${redis.sentinel1.port}"></constructor-arg>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg name="host" value="${redis.sentinel2.host}"></constructor-arg>
                    <constructor-arg name="port" value="${redis.sentinel2.port}"></constructor-arg>
                </bean>
            </set>
        </property>&ndash;&gt;
    </bean>-->

    <!-- redis连接 -->
    <bean id="redisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <!-- 主机名 -->
        <property name="hostName" value="${redis.ip}"/>
        <!-- 端口 -->
        <property name="port" value="${redis.port}"/>
        <!-- redis连接密码 -->
        <property name="password" value="${redis.password}"/>
        <!-- redis 连接池配置 -->
        <property name="poolConfig" ref="jedisPoolConfig"/>
    </bean>
    <!-- spring 支持的redis模板配置 -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="redisConnectionFactory"/>
        <!-- 配置对象序列化存储机制 StringRedisTemplate默认都是StringRedisSerializer -->
        <!--<property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer" >
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>-->
        <!-- 开启事务 -->
        <property name="enableTransactionSupport" value="true"/>
    </bean>
</beans>